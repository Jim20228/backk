import AbstractSqlDbManager from './AbstractSqlDbManager';
export default class MySqlDbManager extends AbstractSqlDbManager {
    private readonly host;
    private readonly user;
    private readonly password;
    private static readonly MAX_CHAR_TYPE_LENGTH;
    private readonly pool;
    constructor(host: string, user: string, password: string, database: string);
    getDbManagerType(): string;
    getDbHost(): string;
    getPool(): any;
    getConnection(): Promise<any>;
    releaseConnection(connection?: any): void;
    getIdColumnType(): string;
    getTimestampType(): string;
    getVarCharType(maxLength: number): string;
    getResultRows(result: any): any[];
    getResultFields(result: any): any[];
    getValuePlaceholder(index: number): string;
    getReturningIdClause(): string;
    getBeginTransactionStatement(): string;
    getInsertId(result: any): number;
    getIdColumnCastType(): string;
    executeSql(connection: any, sqlStatement: string, values?: any[]): Promise<any>;
    executeSqlWithNamedPlaceholders(connection: any, sqlStatement: string, values: object): Promise<any>;
    getModifyColumnStatement(schema: string, tableName: string, columnName: string, columnType: string): string;
    isDuplicateEntityError(error: Error): boolean;
    getAffectedRows(result: any): number;
    shouldConvertTinyIntegersToBooleans(): boolean;
    getBooleanType(): string;
    getUpdateForClause(): string;
    castAsBigint(columnName: string): string;
}
