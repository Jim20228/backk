import AbstractDbManager, { Field } from "./AbstractDbManager";
import { BackkEntity } from "../types/entities/BackkEntity";
import { SubEntity } from "../types/entities/SubEntity";
import MongoDbQuery from "./mongodb/MongoDbQuery";
import SqlExpression from "./sql/expressions/SqlExpression";
import { PromiseErrorOr } from "../types/PromiseErrorOr";
export default class NoOpDbManager extends AbstractDbManager {
    updateEntityByFilters<T extends BackkEntity>(): PromiseErrorOr<null>;
    deleteEntityByFilters<T extends BackkEntity>(): PromiseErrorOr<null>;
    getModifyColumnStatement(): string;
    addSubEntitiesToEntityById<T extends BackkEntity, U extends object>(): PromiseErrorOr<null>;
    addSubEntityToEntityById<T extends BackkEntity, U extends SubEntity>(): PromiseErrorOr<null>;
    createEntity<T>(): PromiseErrorOr<T>;
    deleteAllEntities<T>(): PromiseErrorOr<null>;
    deleteEntitiesByFilters<T extends object>(): PromiseErrorOr<null>;
    deleteEntitiesByField<T extends object>(): PromiseErrorOr<null>;
    deleteEntityById<T extends object>(): PromiseErrorOr<null>;
    executeInsideTransaction<T>(): PromiseErrorOr<T>;
    getAllEntities<T>(): PromiseErrorOr<T[]>;
    getDbHost(): string;
    getDbManagerType(): string;
    getEntitiesByFilters<T>(): PromiseErrorOr<T[]>;
    getEntitiesByIds<T>(): PromiseErrorOr<T[]>;
    getEntityCount<T>(): PromiseErrorOr<number>;
    getEntitiesByField<T>(): PromiseErrorOr<T[]>;
    getEntityById<T>(): PromiseErrorOr<T>;
    getEntityByField<T>(): PromiseErrorOr<T>;
    getIdColumnType(): string;
    getFirstSubEntityOfEntityById<T extends object, U extends object>(): PromiseErrorOr<U>;
    getTimestampType(): string;
    getVarCharType(): string;
    isDbReady(): Promise<boolean>;
    removeSubEntitiesByJsonPathFromEntityById<T extends BackkEntity>(): PromiseErrorOr<null>;
    removeSubEntityByIdFromEntityById<T extends BackkEntity>(): PromiseErrorOr<null>;
    tryExecute<T>(): Promise<T>;
    tryExecuteSql<T>(): Promise<Field[]>;
    tryExecuteSqlWithoutCls<T>(): Promise<Field[]>;
    tryReleaseDbConnectionBackToPool(): void;
    tryReserveDbConnectionFromPool(): Promise<void>;
    updateEntity<T extends BackkEntity>(): PromiseErrorOr<null>;
    updateEntityByField<T extends BackkEntity>(): PromiseErrorOr<null>;
    cleanupTransaction(): void;
    getClient(): any;
    tryBeginTransaction(): Promise<void>;
    connectMongoDb(): Promise<void>;
    disconnectMongoDb(): Promise<void>;
    getEntityByFilters<T>(): PromiseErrorOr<T>;
    isDuplicateEntityError(): boolean;
    getFilters<T>(): Array<MongoDbQuery<T> | SqlExpression> | Partial<T> | object;
    shouldConvertTinyIntegersToBooleans(): boolean;
    updateEntitiesByFilters<T extends BackkEntity>(): PromiseErrorOr<null>;
    getBooleanType(): string;
    deleteEntityByField<T extends BackkEntity>(): PromiseErrorOr<null>;
    removeSubEntityByIdFromEntityByFilters<T extends BackkEntity>(): PromiseErrorOr<null>;
    addEntityArrayFieldValues<T extends BackkEntity>(): PromiseErrorOr<null>;
    removeEntityArrayFieldValues<T extends BackkEntity>(): PromiseErrorOr<null>;
    removeSubEntitiesByJsonPathFromEntityByFilters<T extends BackkEntity, U extends object>(): PromiseErrorOr<null>;
    addSubEntitiesToEntityByFilters<T extends BackkEntity, U extends SubEntity>(): PromiseErrorOr<null>;
    addSubEntityToEntityByFilters<T extends BackkEntity, U extends SubEntity>(): PromiseErrorOr<null>;
    doesEntityArrayFieldContainValue<T extends BackkEntity>(): PromiseErrorOr<boolean>;
}
