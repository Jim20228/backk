import { ErrorDef } from '../../../dbmanager/hooks/PreHook';
import { HttpHeaders } from './ResponseHeaders';
import { UpdateType } from './Update';
import { PostTestSpec } from './PostTests';
import { TestSetupSpec } from './TestSetup';
declare class ServiceFunctionAnnotationContainer {
    private readonly serviceFunctionNameToHasNoCaptchaAnnotationMap;
    private readonly serviceFunctionNameToIsAllowedForEveryUserMap;
    private readonly serviceFunctionNameToIsAllowedForClusterInternalUseMap;
    private readonly serviceFunctionNameToIsAllowedForSelfMap;
    private readonly serviceFunctionNameToIsAllowedForServicePrivateUseMap;
    private readonly serviceFunctionNameToAllowedUserRolesMap;
    private readonly serviceFunctionNameToDocStringMap;
    private readonly serviceFunctionNameToAllowedForTestsMap;
    private readonly serviceFunctionNameToErrorsMap;
    private readonly serviceFunctionNameToIsNotTransactionalMap;
    private readonly serviceFunctionNameToIsNotDistributedTransactionalMap;
    private readonly serviceFunctionNameToCronScheduleMap;
    private readonly serviceFunctionNameToRetryIntervalsInSecsMap;
    private readonly serviceFunctionNameToUpdateTypeMap;
    private readonly serviceFunctionNameToResponseHeadersMap;
    private readonly serviceFunctionNameToHasNoAutoTestMap;
    private readonly serviceFunctionNameToExpectedResponseFieldPathNameToFieldValueMapMap;
    private readonly serviceFunctionNameToPostTestSpecsMap;
    private readonly serviceFunctionNameToOnStartUpMap;
    private readonly serviceFunctionNameToIsCreateFunctionMap;
    private readonly serviceFunctionNameToIsMetadataFunctionMap;
    private readonly serviceFunctionNameToIsDeleteFunctionMap;
    private readonly serviceFunctionNameToResponseStatusCodeMap;
    private readonly serviceFunctionNameToTestSetupMap;
    addNoCaptchaAnnotation(serviceClass: Function, functionName: string): void;
    addAllowedUserRoles(serviceClass: Function, functionName: string, roles: string[]): void;
    addServiceFunctionAllowedForEveryUser(serviceClass: Function, functionName: string): void;
    addServiceFunctionAllowedForClusterInternalUse(serviceClass: Function, functionName: string): void;
    addServiceFunctionAllowedForSelf(serviceClass: Function, functionName: string): void;
    addServiceFunctionAllowedForServiceInternalUse(serviceClass: Function, functionName: string): void;
    addDocumentationForServiceFunction(serviceClass: Function, functionName: string, docString: string): void;
    addResponseStatusCodeForServiceFunction(serviceClass: Function, functionName: string, statusCode: number): void;
    addServiceFunctionAllowedForTests(serviceClass: Function, functionName: string): void;
    addErrorsForServiceFunction(serviceClass: Function, functionName: string, errors: ErrorDef[]): void;
    addNonTransactionalServiceFunction(serviceClass: Function, functionName: string): void;
    addNonDistributedTransactionalServiceFunction(serviceClass: Function, functionName: string): void;
    addCronScheduleForServiceFunction(serviceClass: Function, functionName: string, cronSchedule: string): void;
    addRetryIntervalsInSecsForServiceFunction(serviceClass: Function, functionName: string, retryIntervalsInSecs: number[]): void;
    addUpdateAnnotation(serviceClass: Function, functionName: string, updateType: UpdateType): void;
    addResponseHeadersForServiceFunction<T extends object, U extends any>(serviceClass: Function, functionName: string, headers: HttpHeaders<T, U>): void;
    addNoAutoTestAnnotation(serviceClass: Function, functionName: string): void;
    addOnStartUpAnnotation(serviceClass: Function, functionName: string): void;
    addCreateAnnotation(serviceClass: Function, functionName: string): void;
    addMetadataFunctionAnnotation(serviceClass: Function, functionName: string): void;
    addDeleteAnnotation(serviceClass: Function, functionName: string): void;
    addTestSetup(serviceClass: Function, functionName: string, serviceFunctionsOrSpecsToExecute: (string | TestSetupSpec)[]): void;
    expectServiceFunctionReturnValueToContainInTests(serviceClass: Function, functionName: string, fieldPathNameToFieldValueMap: {
        [key: string]: any;
    }): void;
    expectServiceFunctionEntityToContainInTests(serviceClass: Function, functionName: string, testSpecs: PostTestSpec[]): void;
    getAllowedUserRoles(serviceClass: Function, functionName: string): string[];
    isServiceFunctionAllowedForEveryUser(serviceClass: Function, functionName: string): boolean;
    isServiceFunctionAllowedForClusterInternalUse(serviceClass: Function, functionName: string): boolean;
    isServiceFunctionAllowedForSelf(serviceClass: Function, functionName: string): boolean;
    isServiceFunctionAllowedForServiceInternalUse(serviceClass: Function, functionName: string): boolean;
    hasNoCaptchaAnnotationForServiceFunction(serviceClass: Function, functionName: string): boolean;
    getDocumentationForServiceFunction(serviceClass: Function, functionName: string): string | undefined;
    getResponseStatusCodeForServiceFunction(serviceClass: Function, functionName: string): number | undefined;
    isServiceFunctionAllowedForTests(serviceClass: Function, functionName: string): boolean;
    getErrorsForServiceFunction(serviceClass: Function, functionName: string): ErrorDef[] | undefined;
    isServiceFunctionNonTransactional(serviceClass: Function, functionName: string): boolean;
    isServiceFunctionNonDistributedTransactional(serviceClass: Function, functionName: string): boolean;
    getUpdateTypeForServiceFunction(serviceClass: Function, functionName: string): "update" | "addOrRemove" | undefined;
    isCreateServiceFunction(serviceClass: Function, functionName: string): boolean;
    isDeleteServiceFunction(serviceClass: Function, functionName: string): boolean;
    getServiceFunctionNameToCronScheduleMap(): {
        [key: string]: string;
    };
    getServiceFunctionNameToRetryIntervalsInSecsMap(): {
        [key: string]: number[];
    };
    getResponseHeadersForServiceFunction<T extends object, U extends any>(serviceClass: Function, functionName: string): HttpHeaders<T, U> | undefined;
    hasNoAutoTests(serviceClass: Function, functionName: string): boolean;
    hasOnStartUp(serviceClass: Function, functionName: string): boolean;
    isMetadataServiceFunction(serviceClass: Function, functionName: string): boolean;
    getExpectedResponseValueFieldPathNameToFieldValueMapForTests(serviceClass: Function, functionName: string): {
        [key: string]: any;
    } | undefined;
    getPostTestSpecs(serviceClass: Function, functionName: string): PostTestSpec[] | undefined;
    getTestSetup(serviceClass: Function, functionName: string): (string | TestSetupSpec)[] | undefined;
}
declare const _default: ServiceFunctionAnnotationContainer;
export default _default;
